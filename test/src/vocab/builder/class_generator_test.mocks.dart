// Mocks generated by Mockito 5.4.6 from annotations
// in rdf_vocabulary_to_dart/test/src/vocab/builder/class_generator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rdf_vocabulary_to_dart/src/vocab/builder/cross_vocabulary_resolver.dart'
    as _i2;
import 'package:rdf_vocabulary_to_dart/src/vocab/builder/model/vocabulary_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CrossVocabularyResolver].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrossVocabularyResolver extends _i1.Mock
    implements _i2.CrossVocabularyResolver {
  MockCrossVocabularyResolver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerVocabulary(_i3.VocabularyModel? model) => super.noSuchMethod(
    Invocation.method(#registerVocabulary, [model]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> loadPendingVocabularies() =>
      (super.noSuchMethod(
            Invocation.method(#loadPendingVocabularies, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i3.VocabularyProperty> getPropertiesForClass(
    String? classIri,
    String? vocabNamespace,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPropertiesForClass, [
              classIri,
              vocabNamespace,
            ]),
            returnValue: <_i3.VocabularyProperty>[],
          )
          as List<_i3.VocabularyProperty>);

  @override
  Set<String> getAllClassTypes(String? classIri) =>
      (super.noSuchMethod(
            Invocation.method(#getAllClassTypes, [classIri]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Set<String> getAllEquivalentClasses(String? classIri) =>
      (super.noSuchMethod(
            Invocation.method(#getAllEquivalentClasses, [classIri]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Set<String> getAllSuperClasses(String? classIri) =>
      (super.noSuchMethod(
            Invocation.method(#getAllSuperClasses, [classIri]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Set<String> getAllEquivalentClassSuperClasses(String? classIri) =>
      (super.noSuchMethod(
            Invocation.method(#getAllEquivalentClassSuperClasses, [classIri]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  List<_i3.VocabularyProperty> getCrossVocabPropertiesForClass(
    String? classIri,
    String? sourceVocabNamespace,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCrossVocabPropertiesForClass, [
              classIri,
              sourceVocabNamespace,
            ]),
            returnValue: <_i3.VocabularyProperty>[],
          )
          as List<_i3.VocabularyProperty>);

  @override
  Map<String, dynamic> getClassInheritanceDebugInfo(String? classIri) =>
      (super.noSuchMethod(
            Invocation.method(#getClassInheritanceDebugInfo, [classIri]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
