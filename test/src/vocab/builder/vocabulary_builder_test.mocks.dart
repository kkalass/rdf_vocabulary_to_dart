// Mocks generated by Mockito 5.4.6 from annotations
// in rdf_vocabulary_to_dart/test/src/vocab/builder/vocabulary_builder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i11;

import 'package:analyzer/dart/element/element.dart' as _i3;
import 'package:build/src/analyzer/resolver.dart' as _i4;
import 'package:build/src/asset/id.dart' as _i2;
import 'package:build/src/builder/build_step.dart' as _i8;
import 'package:build/src/resource/resource.dart' as _i9;
import 'package:crypto/crypto.dart' as _i7;
import 'package:glob/glob.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:package_config/package_config_types.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetId_0 extends _i1.SmartFake implements _i2.AssetId {
  _FakeAssetId_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLibraryElement_1 extends _i1.SmartFake
    implements _i3.LibraryElement {
  _FakeLibraryElement_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResolver_2 extends _i1.SmartFake implements _i4.Resolver {
  _FakeResolver_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePackageConfig_3 extends _i1.SmartFake implements _i5.PackageConfig {
  _FakePackageConfig_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_4<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDigest_5 extends _i1.SmartFake implements _i7.Digest {
  _FakeDigest_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BuildStep].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildStep extends _i1.Mock implements _i8.BuildStep {
  MockBuildStep() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AssetId get inputId =>
      (super.noSuchMethod(
            Invocation.getter(#inputId),
            returnValue: _FakeAssetId_0(this, Invocation.getter(#inputId)),
          )
          as _i2.AssetId);

  @override
  _i6.Future<_i3.LibraryElement> get inputLibrary =>
      (super.noSuchMethod(
            Invocation.getter(#inputLibrary),
            returnValue: _i6.Future<_i3.LibraryElement>.value(
              _FakeLibraryElement_1(this, Invocation.getter(#inputLibrary)),
            ),
          )
          as _i6.Future<_i3.LibraryElement>);

  @override
  _i4.Resolver get resolver =>
      (super.noSuchMethod(
            Invocation.getter(#resolver),
            returnValue: _FakeResolver_2(this, Invocation.getter(#resolver)),
          )
          as _i4.Resolver);

  @override
  Iterable<_i2.AssetId> get allowedOutputs =>
      (super.noSuchMethod(
            Invocation.getter(#allowedOutputs),
            returnValue: <_i2.AssetId>[],
          )
          as Iterable<_i2.AssetId>);

  @override
  _i6.Future<_i5.PackageConfig> get packageConfig =>
      (super.noSuchMethod(
            Invocation.getter(#packageConfig),
            returnValue: _i6.Future<_i5.PackageConfig>.value(
              _FakePackageConfig_3(this, Invocation.getter(#packageConfig)),
            ),
          )
          as _i6.Future<_i5.PackageConfig>);

  @override
  _i6.Future<T> fetchResource<T>(_i9.Resource<T>? resource) =>
      (super.noSuchMethod(
            Invocation.method(#fetchResource, [resource]),
            returnValue:
                _i10.ifNotNull(
                  _i10.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#fetchResource, [resource]),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_4<T>(
                  this,
                  Invocation.method(#fetchResource, [resource]),
                ),
          )
          as _i6.Future<T>);

  @override
  _i6.Future<void> writeAsBytes(
    _i2.AssetId? id,
    _i6.FutureOr<List<int>>? bytes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#writeAsBytes, [id, bytes]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> writeAsString(
    _i2.AssetId? id,
    _i6.FutureOr<String>? contents, {
    _i11.Encoding? encoding = const _i11.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [id, contents],
              {#encoding: encoding},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  T trackStage<T>(
    String? label,
    T Function()? action, {
    bool? isExternal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackStage,
              [label, action],
              {#isExternal: isExternal},
            ),
            returnValue: _i10.dummyValue<T>(
              this,
              Invocation.method(
                #trackStage,
                [label, action],
                {#isExternal: isExternal},
              ),
            ),
          )
          as T);

  @override
  void reportUnusedAssets(Iterable<_i2.AssetId>? ids) => super.noSuchMethod(
    Invocation.method(#reportUnusedAssets, [ids]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<List<int>> readAsBytes(_i2.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, [id]),
            returnValue: _i6.Future<List<int>>.value(<int>[]),
          )
          as _i6.Future<List<int>>);

  @override
  _i6.Future<String> readAsString(
    _i2.AssetId? id, {
    _i11.Encoding? encoding = const _i11.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [id], {#encoding: encoding}),
            returnValue: _i6.Future<String>.value(
              _i10.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [id], {#encoding: encoding}),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<bool> canRead(_i2.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#canRead, [id]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Stream<_i2.AssetId> findAssets(_i12.Glob? glob) =>
      (super.noSuchMethod(
            Invocation.method(#findAssets, [glob]),
            returnValue: _i6.Stream<_i2.AssetId>.empty(),
          )
          as _i6.Stream<_i2.AssetId>);

  @override
  _i6.Future<_i7.Digest> digest(_i2.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#digest, [id]),
            returnValue: _i6.Future<_i7.Digest>.value(
              _FakeDigest_5(this, Invocation.method(#digest, [id])),
            ),
          )
          as _i6.Future<_i7.Digest>);
}
